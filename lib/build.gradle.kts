/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.14.1/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    `java-library`
    signing
    id("com.vanniktech.maven.publish") version "0.30.0"
}

afterEvaluate {
    signing {
        useGpgCmd()
        sign(publishing.publications)
    }
}

mavenPublishing {
    publishToMavenCentral(com.vanniktech.maven.publish.SonatypeHost.CENTRAL_PORTAL, automaticRelease = true)
    signAllPublications()

    coordinates(
        groupId = project.group.toString(),
        artifactId = "nano-kafka",
        version = project.version.toString()
    )

    pom {
        name.set("nanoKafka")
        description.set("Lightweight Kafka-inspired components for learning and experimentation.")
        url.set("https://github.com/unknowntpo/nanoKafka")

        licenses {
            license {
                name.set("Apache License, Version 2.0")
                url.set("https://www.apache.org/licenses/LICENSE-2.0")
            }
        }

        developers {
            developer {
                id.set("unknowntpo")
                name.set("Eric Chang")
                email.set("unknowntpo@apache.org")
            }
        }

        scm {
            connection.set("scm:git:https://github.com/unknowntpo/nanoKafka.git")
            developerConnection.set("scm:git:ssh://github.com/unknowntpo/nanoKafka.git")
            url.set("https://github.com/unknowntpo/nanoKafka")
        }
    }
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation(libs.junit.jupiter)

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api(libs.commons.math3)

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation(libs.guava)
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

